<div class="slides">
	<section>
		<section>
		<h1>GIT</h1>
		<p class="fragment" >The name "git" was given by Linus Torvalds when he wrote the very
			first version. He described the tool as "the stupid content tracker"
			and the name as (depending on your mood):</p>
		</section>

		<section>
			<ul>
				<li>
					<p>random three-letter combination that is pronounceable, and not
					actually used by any common UNIX command.  The fact that it is a
					mispronunciation of "get" may or may not be relevant.
					</p>
				</li>
				<li>
					<p class="fragment">stupid. contemptible and despicable. simple. Take your pick from the
				dictionary of slang.
					</p>
				</li>
				<li>
					<p class="fragment"><code>"global information tracker"</code>: you're in a good mood, and it actually
				works for you. Angels sing, and a light suddenly fills the room.
					</p>
				</li>
				<li>
					<p class="fragment">"goddamn idiotic truckload of sh*t": when it breaks
					</p>
				</li>
			</ul>
		</section>
	</section>

	<section>
		<p>Git supports rapid branching and merging, and includes specific tools for visualizing and navigating
			a non-linear development history. A core assumption in Git is that a change will be merged more often
			than it is written, as it is passed around various reviewers. Branches in Git are very lightweight:
			A branch in Git is only a reference to a single commit. With its parental commits, the full branch
			structure can be constructed.
		</p>
	</section>

	<section>
		<p>
			Git also has a CVS (Concurrent Versions System) server emulation, which enables the use of existing
			CVS clients and IDE plugins to access Git repositories
		</p>
	</section>

	<section>
		<h3>
			Characteristics of GIT
		</h3>
		<ol>
			<li class="fragment">Strong support for non-linear development</li>
			<li class="fragment">Offers distributed development</li>
			<li class="fragment">Compatible with existing systems/protocols</li>
			<li class="fragment">Efficient in handling large projects</li>
			<li class="fragment">Cryptographic authentication of history</li>
			<li class="fragment">It has a toolkit-based design</li>
			<li class="fragment">Pluggable merge strategies</li>
			<li class="fragment">Garbage accumulates until collected</li>
			<li class="fragment">Periodic explicit object packing</li>
		</ol>
	</section>
	<section>
		<h2>Some of the concepts...</h2>
		<ol>
			<li class="fragment">Cloning</li>
            <li class="fragment">Tracking</li>
            <li class="fragment">Staging</li>
            <li class="fragment">Comitting</li>
			<li class="fragment">Pushing and Pulling</li>
            <li class="fragment">Tagging</li>
			<li class="fragment">Branching</li>
			<li class="fragment">Merging</li>
            <li class="fragment">Rebasing</li>
			<li class="fragment">Changelists</li>
		</ol>
	</section>
	<section>
		<section>
            <h2>
				Cloning
			</h2>
            <p class="fragment">Cloning makes a copy of an existing repository of a project that you are required to contribute to. When a
                repository is cloned, GIT receives a full copy of almost all the data the server has. This can be used as a backup
                if the server file is corrupted.
            </p>
			<p class="fragment">
				If you need to collaborate with someone on a project, or if you want to get a copy
				of a project so you can look at it or use the code, you will clone it. You simply run
				the <code>git clone</code> command with the URL of the project you want to copy.
			</p>
        </section>
		<section>
			<h2>Command</h2>
			<p>git clone [url]</p>
			<pre>
				<code data-trim contenteditable>
$ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY
Cloning into `Spoon-Knife`...
remote: Counting objects: 10, done.
remote: Compressing objects: 100% (8/8), done.
remove: Total 10 (delta 1), reused 10 (delta 1)
Unpacking objects: 100% (10/10), done.
				</code>
			</pre>
		</section>
		<section>
			<h2>
				Pycharm
			</h2>
			<p class="fragment">VCS | Checkout from Version Control | GitHub</p>
			<p class="fragment">Enter your login and password you registered</p>
			<p class="fragment">Select Git Hub Repository to Clone</p>
			<p class="fragment">Select the source repository</p>
			<p class="fragment">Specify the directory for the local repository</p>
			<p class="fragment">Specify the name of the project </p>
			<p class="fragment">Click Clone </p>
		</section>
	</section>
    <section>
        <section>
            <h2>Tracking</h2>
            <p class="fragment">
                Each file in your working directory can be in on of two states, tracked and untracked files. Tracked files are files
                that appear in your last snapshot. Untracked files are files in your working directory that don't appear in your last
                snapshot. You must use the git add command to begin tracking a file. You can use the status command to see which file
                is in which state.
            </p>
        </section>
        <section>
            <p>
                In order to begin tracking a new file, you use the command git add. To begin tracking the README file, you can run this:
            </p>
            <pre>
				<code data-trim contenteditable>
$ git add README
				</code>
			</pre>
            <p>
                If you run your status command again, you can see that your README file is now tracked and staged to be committed:
            </p>
            <pre>
				<code data-trim contenteditable>
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD file..." to unstage)

    new file:   README
				</code>
			</pre>
        </section>
    </section>
    <section>
        <section>
            <h2>
                Staging
            </h2>
            <p class="fragment">
                If you modify a file after it has been tracked and check the status of, you will see the file name appear under the heading
                "Changes not staged for commit:" to stage this file, you must run the add command. Once this has been done your file will
                be added to the next commit. You can stage a file, make changes after staging and the file at the point it was staged
                will go into the commit and the last modifications will not. You will have to run the add command again to include all
                changes to the commit..
            </p>
        </section>
        <section>
            <p>
                Staging a file and checking the status
            </p>
            <pre>
                <code data-trim contenteditable>
                    $ git add CONTRIBUTING.md
    $ git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes to be committed:
      (use "git reset HEAD file..." to unstage)

        new file:   README
        modified:   CONTRIBUTING.md
                </code>
            </pre>
            <p>
                Both files are staged and will go into your next commit
            </p>
        </section>
        <section>
            <p>
                At this point, suppose you remember one little change that you want to make in CONTRIBUTING.md before you commit it.
                You open it again and make that change, and you’re ready to commit. However, let’s run git status one more time:
            </p>
            <pre>
                <code data data-trim contenteditable>
                    $ vim CONTRIBUTING.md
    $ git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes to be committed:
      (use "git reset HEAD file..." to unstage)

        new file:   README
        modified:   CONTRIBUTING.md

    Changes not staged for commit:
      (use "git add file..." to update what will be committed)
      (use "git checkout -- file..." to discard changes in working directory)

        modified:   CONTRIBUTING.md
                </code>
            </pre>
        </section>
        <section>
            <p style="font-size: 30px;">
                What the heck? Now CONTRIBUTING.md is listed as both staged and unstaged. How is that possible?
                It turns out that Git stages a file exactly as it is when you run the git add command. If you commit
                now, the version of CONTRIBUTING.md as it was when you last ran the git add command is how it will
                go into the commit, not the version of the file as it looks in your working directory when you run git
                commit. If you modify a file after you run git add, you have to run git add again to stage the latest
                version of the file:
            </p>
            <pre>
                <code data-trim  contenteditable>
                    $ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD file..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
                </code>
            </pre>
        </section>
    </section>
    <section>
        <h2>
            Commiting
        </h2>
        <p >
            Once all changes have been staged, you can now commit these changes. All files that have not had the add command on
            will not be committed.
        </p>
        <p >
            You can commit all tracked files by skipping the staging process by running the commit tracked files command.
        </p>
        <pre>
            <code data-trim contenteditable>
                $ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
            </code>
        </pre>
    </section>

	<section>
		<section>
			<h2>
				Pushing and Pulling
			</h2>
			<p class="fragment">
				<strong>Pulling :</strong> Incorporates changes from a remote repository into the current branch.
				 In its default mode, git pull is shorthand for git fetch followed by git merge FETCH_HEAD.
			</p>
			<p class="fragment">
				<strong>Pushing:</strong> GIT push [alias] [branch] to update a remote repository with the changes you've
				made locally. It will take what your [branch] looks like and push it to be [branch] on the
				remote, if possible. If someone else has pushed since you last fetched and merged, the Git
				server will deny your push until you are up to date.
			</p>
		</section>
		<section>
			<h2>Command</h2>
			<p><strong>Pulling</strong></p>
			<pre>
				<code data-trim contenteditable>
$ git pull remotename branchname
# Grabs online updates and merges them with your local work
				</code>
			</pre>
            <p><strong>Pushing</strong></p>
            <pre>
				<code data-trim contenteditable>
$ git push  remotename branchname
				</code>
			</pre>
		</section>
		<section>
			<h2>
				Pycharm
			</h2>
			<p class="fragment">VCS | Git | Push </p>
			<p class="fragment">Select the commit to push</p>
			<p class="fragment">Select which files you want to upload</p>
			<p class="fragment">Specify the target remote branch to push to</p>
			<p class="fragment">Select Push button</p>
		</section>
        <section>
            <h2>
                Errors
            </h2>
            <pre>
				<code data-trim contenteditable>
$ git push github master
To git@github.com:schacon/hw.git
 ! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'git@github.com:schacon/hw.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes before pushing again.
You can fix this by running git fetch github; git merge github/master and then pushing again.
				</code>
			</pre>
            <p class="fragment">If push is rejected due to lack of synchronization, update the local branch</p>
        </section>
    </section>
    <section>
        <section>
            <h2>
                Tagging
            </h2>
            <p class="fragment">
                You are able to tag a specific point in history. These are used to mark release points or whatever
                you might like to use them for. To see the tags listed in a project, simply run the list tag command.
            </p>
            <p class="fragment">
                There are two main types of tags: lightweight and annotated. A lightweight tag is a pointer to a specific commit. Annotated tags are
                stored as full objects in the GIT database, they contain more information about who created the tag.
                To create tags use the lightweight and annotated commands, depending on which tag you wanting to create.
                You are able to tag commits after you have moved past them. To do this, use the tag previous commit tag.
            </p>
        </section>
        <section>
            <h2>Creating and Listing tags</h2>
            <pre>
                <code data-trim contenteditable>
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
                </code>
            </pre>
        </section>
        <section>
            <h2>Showing details of an annotated tag</h2>
            <pre>
                <code data-trim contenteditable>
                    $ git show v1.4
tag v1.4
Tagger: Ben Straub ben@straub.cc
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon schacon@gee-mail.com
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
                </code>
            </pre>

        </section>
    </section>
    <section>
        <section >
            <h2>Branching</h2>
            <p class="fragment" style="font-size: 30px;">
                Branching means you diverge from the main line of development and continue to do work without
                messing with the main line. To create a new branch you run the branch command.
            </p>

            <p class="fragment" style="font-size: 30px;">
                GIT stores it's data as a series of snapshots, with a pointer pointing to a snapshot you are currently working on.
            </p>
            <p class="fragment" style="font-size: 30px;">
                When a branch is created and changes are made, depending on which file you are making changes to the pointer will
                move forward to a newly created version of the project for that specific branch.
            </p>
            <p class="fragment" style="font-size: 30px;">
                If no changes are made to any other branch, no new versions are created of that branch and when you want to
                go to that branch the pointer will point back to the snapshot of the point you checked out to switch branches.
            </p>
        </section>
        <section>
            <p>
                Without arguments, git branch will list out the local branches that you have. The branch that you are currently
                working on will have a star next to it and if you have coloring turned on, will show the current branch in green.
            </p>
            <pre>
                <code data-text contenteditable>
$ git branch
* master
  testing
                </code>
            </pre>
        </section>
        <section>
            <p>
               git branch (branchname) create a new branch
            </p>

            <pre>
                <code data-text contenteditable>
$ git branch testing

$ git branch
* master
  testing
                </code>
            </pre>
        </section>
    <section>
        <p>
            Switching Branches
        </p>
        <pre>
            <code data-text contenteditable>
$ git checkout testing
Switched to branch 'testing'
            </code>
        </pre>
    </section>
    <section>
        <p>
            git branch -v see the last commit on each branch
        </p>
        <pre>
            <code data-text contenteditable>
$ git branch -v
* master      54b417d fix javascript issue
  development 74c111d modify component.json file
  testing     62a557a update test scripts
            </code>
        </pre>
    </section>
    <section>
        <p>
            If we want to delete a branch, we can run git branch -d (branch) to remove it.
        </p>
        <pre>
            <code data-text contenteditable>
$ git branch
* master
  testing

$ git branch -d testing
Deleted branch testing (was 78b2670).

$ git branch
* master
            </code>
        </pre>
    </section>
</section>
    <section>
        <section>
            <h2>
                Merging
            </h2>
            <p>
                When your work is complete and you want to incorporate this branch into your master do the following:
            </p>
            <p>
                First check out the branch you want to merge into. You then use git merge with the branch name that you want to merge in.
            </p>
        </section>
        <section>
            <h2>
                Pre-merge checks
            </h2>
            <ul>
                <li>Commit locally</li>
                <li>If all named commits are already ancestors of HEAD, git merge will exit early
                    with the message "Already up-to-date."</li>
                <li>To avoid recording unrelated changes in the merge commit, git pull and git merge
                    will also abort if there are any changes registered in the index relative to the HEAD commit. </li>
            </ul>
        </section>
        <section>
            <h2>
                Fast Forward merge
            </h2>
            <p>
                When you try to merge one commit with a commit that can be reached by following the first commit’s history,
                Git simplifies things by moving the pointer forward because there is no divergent work to merge together –
                this is called a “fast-forward.”
            </p>
            <pre>
                <code data-trim data-noescape>
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
                </code>
            </pre>
        </section>
        <section>
            <p>diagram of fast forward merge</p>
            <a  >
                <img  src="C:\Users\Annette.Small\WebstormProjects\notell\assets\img\Fast-forward merge.jpg" alt="Up arrow" >
            </a>
        </section>
        <section>
            <h2>
                Three-way merge
            </h2>
            <p>
                This occurs when a branch has diverged from the master. GIT uses three commits to generate the merge commit.
                The two branch tip and their common ancestor.
            </p>
            <pre>
                <code data text contenteditable>
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
                </code>
            </pre>
        </section>
        <section>
            <h2>
                Merge conflicts
            </h2>
        </section>
    </section>
    <section>
        <section>
            <h2>
                Rebasing
            </h2>
            <p>
                The primary reason for rebasing is to maintain a linear project history. This method can be used instead
                of a 3-way merge. So if the master branch has progressed since you started working on a feature, you can
                rebase your feature and merge the two.
            </p>
            <pre>
                <code data-text contenteditable>

                </code>
            </pre>
        </section>
    </section>
    <section>
        <section>
            <h2>
                Changelists
            </h2>
            <p>
                A changelist is a set of changes in files that represents a logical change in source code. The changes
                specified in a changelist are not stored in the repository until committed (pushed). Any changes made
                to the source files, are automatically included in the active changelist.
            </p>
        </section>
    </section>
    <section>
        <section>
            <h2>
                Integration with YouTrack
            </h2>
        </section>
    </section>


</div>




<!-- Any section element inside of this container is displayed as a slide
<div class="slides">
	<section>
		<h1>GIT</h1>
		<p class="fragment">



			<small>Created by <a href="http://hakim.se">Hakim El Hattab</a> / <a href="http://twitter.com/hakimel">@hakimel</a></small>
		</p>
	</section>

	<section>
		<h2>Heads Up</h2>
		<p>
			reveal.js is a framework for easily creating beautiful presentations using HTML. You'll need a browser with
			support for CSS 3D transforms to see it in its full glory.
		</p>

		<aside class="notes">
			Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).
		</aside>
	</section>

 Example of nested vertical slides
	<section>
		<section>
			<h2>Vertical Slides</h2>
			<p>
				Slides can be nested inside of other slides,
				try pressing <a href="#" class="navigate-down">down</a>.
			</p>
			<a href="#" class="image navigate-down">
				<img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Down arrow">
			</a>
		</section>
		<section>
			<h2>Basement Level 1</h2>
			<p>Press down or up to navigate.</p>
		</section>
		<section>
			<h2>Basement Level 2</h2>
			<p>Cornify</p>
			<a class="test" href="http://cornify.com">
				<img width="280" height="326" src="https://s3.amazonaws.com/hakim-static/reveal-js/cornify.gif" alt="Unicorn">
			</a>
		</section>
		<section>
			<h2>Basement Level 3</h2>
			<p>That's it, time to go back up.</p>
			<a href="#/2" class="image">
				<img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Up arrow" style="-webkit-transform: rotate(180deg);">
			</a>
		</section>
	</section>

	<section>
		<h2>Slides</h2>
		<p>
			Not a coder? No problem. There's a fully-featured visual editor for authoring these, try it out at <a href="http://slid.es" target="_blank">http://slid.es</a>.
		</p>
	</section>

	<section>
		<h2>Point of View</h2>
		<p>
			Press <strong>ESC</strong> to enter the slide overview.
		</p>
		<p>
			Hold down alt and click on any element to zoom in on it using <a href="http://lab.hakim.se/zoom-js">zoom.js</a>. Alt + click anywhere to zoom back out.
		</p>
	</section>

	<section>
		<h2>Works in Mobile Safari</h2>
		<p>
			Try it out! You can swipe through the slides and pinch your way to the overview.
		</p>
	</section>

	<section>
		<h2>Marvelous Unordered List</h2>
		<ul>
			<li>No order here</li>
			<li>Or here</li>
			<li>Or here</li>
			<li>Or here</li>
		</ul>
	</section>

	<section>
		<h2>Fantastic Ordered List</h2>
		<ol>
			<li>One is smaller than...</li>
			<li>Two is smaller than...</li>
			<li>Three!</li>
		</ol>
	</section>

	<section data-markdown>
		<script type="text/template">
			## Markdown support

			For those of you who like that sort of thing. Instructions and a bit more info available [here](https://github.com/hakimel/reveal.js#markdown).

			```
			<section data-markdown>
			  ## Markdown support

			  For those of you who like that sort of thing.
			  Instructions and a bit more info available [here](https://github.com/hakimel/reveal.js#markdown).
			</section>
			```
		</script>
	</section>

	<section id="transitions">
		<h2>Transition Styles</h2>
		<p>
			You can select from different transitions, like: <br>
			<a href="?transition=cube#/transitions">Cube</a> -
			<a href="?transition=page#/transitions">Page</a> -
			<a href="?transition=concave#/transitions">Concave</a> -
			<a href="?transition=zoom#/transitions">Zoom</a> -
			<a href="?transition=linear#/transitions">Linear</a> -
			<a href="?transition=fade#/transitions">Fade</a> -
			<a href="?transition=none#/transitions">None</a> -
			<a href="?#/transitions">Default</a>
		</p>
	</section>

	<section id="themes">
		<h2>Themes</h2>
		<p>
			Reveal.js comes with a few themes built in: <br>
			<a href="?#/themes">Default</a> -
			<a href="?theme=sky#/themes">Sky</a> -
			<a href="?theme=beige#/themes">Beige</a> -
			<a href="?theme=simple#/themes">Simple</a> -
			<a href="?theme=serif#/themes">Serif</a> -
			<a href="?theme=night#/themes">Night</a> <br>
			<a href="?theme=moon.css#/themes">Moon</a> -
			<a href="?theme=simple.css#/themes">Simple</a> -
			<a href="?theme=solarized.css#/themes">Solarized</a>
		</p>
		<p>
			<small>
				* Theme demos are loaded after the presentation which leads to flicker. In production you should load your theme in the <code>&lt;head&gt;</code> using a <code>&lt;link&gt;</code>.
			</small>
		</p>
	</section>

	<section>
		<h2>Global State</h2>
		<p>
			Set <code>data-state="something"</code> on a slide and <code>"something"</code>
			will be added as a class to the document element when the slide is open. This lets you
			apply broader style changes, like switching the background.
		</p>
	</section>

	<section data-state="customevent">
		<h2>Custom Events</h2>
		<p>
			Additionally custom events can be triggered on a per slide basis by binding to the <code>data-state</code> name.
		</p>
		<pre><code data-trim contenteditable style="font-size: 18px; margin-top: 20px;">
Reveal.addEventListener( 'customevent', function() {
console.log( '"customevent" has fired' );
} );
		</code></pre>
	</section>

	<section>
		<section data-background="#007777">
			<h2>Slide Backgrounds</h2>
			<p>
				Set <code>data-background="#007777"</code> on a slide to change the full page background to the given color. All CSS color formats are supported.
			</p>
			<a href="#" class="image navigate-down">
				<img width="178" height="238" src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Down arrow">
			</a>
		</section>
		<section data-background="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png">
			<h2>Image Backgrounds</h2>
			<pre><code>&lt;section data-background="image.png"&gt;</code></pre>
		</section>
		<section data-background="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" data-background-repeat="repeat" data-background-size="100px">
			<h2>Repeated Image Backgrounds</h2>
			<pre><code style="word-wrap: break-word;">&lt;section data-background="image.png" data-background-repeat="repeat" data-background-size="100px"&gt;</code></pre>
		</section>
	</section>

	<section data-transition="linear" data-background="#4d7e65" data-background-transition="slide">
		<h2>Background Transitions</h2>
		<p>
			Pass reveal.js the <code>backgroundTransition: 'slide'</code> config argument to make backgrounds slide rather than fade.
		</p>
	</section>

	<section data-transition="linear" data-background="#8c4738" data-background-transition="slide">
		<h2>Background Transition Override</h2>
		<p>
			You can override background transitions per slide by using <code>data-background-transition="slide"</code>.
		</p>
	</section>

	<section>
		<h2>Clever Quotes</h2>
		<p>
			These guys come in two forms, inline: <q cite="http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations">
			&ldquo;The nice thing about standards is that there are so many to choose from&rdquo;</q> and block:
		</p>
		<blockquote cite="http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations">
			&ldquo;For years there has been a theory that millions of monkeys typing at random on millions of typewriters would
			reproduce the entire works of Shakespeare. The Internet has proven this theory to be untrue.&rdquo;
		</blockquote>
	</section>

	<section>
		<h2>Pretty Code</h2>
		<pre><code data-trim contenteditable>
function linkify( selector ) {
    if( supports3DTransforms ) {

        var nodes = document.querySelectorAll( selector );

        for( var i = 0, len = nodes.length; i &lt; len; i++ ) {
            var node = nodes[i];

            if( !node.className ) {
                node.className += 'roll';
            }
        }
    }
}
		</code></pre>
		<p>Courtesy of <a href="http://softwaremaniacs.org/soft/highlight/en/description/">highlight.js</a>.</p>
	</section>

	<section>
		<h2>Intergalactic Interconnections</h2>
		<p>
			You can link between slides internally,
			<a href="#/2/3">like this</a>.
		</p>
	</section>

	<section>
		<section id="fragments">
			<h2>Fragmented Views</h2>
			<p>Hit the next arrow...</p>
			<p class="fragment">... to step through ...</p>
			<ol>
				<li class="fragment"><code>any type</code></li>
				<li class="fragment"><em>of view</em></li>
				<li class="fragment"><strong>fragments</strong></li>
			</ol>

			<aside class="notes">
				This slide has fragments which are also stepped through in the notes window.
			</aside>
		</section>
		<section>
			<h2>Fragment Styles</h2>
			<p>There's a few styles of fragments, like:</p>
			<p class="fragment grow">grow</p>
			<p class="fragment shrink">shrink</p>
			<p class="fragment roll-in">roll-in</p>
			<p class="fragment fade-out">fade-out</p>
			<p class="fragment highlight-red">highlight-red</p>
			<p class="fragment highlight-green">highlight-green</p>
			<p class="fragment highlight-blue">highlight-blue</p>
			<p class="fragment current-visible">current-visible</p>
			<p class="fragment highlight-current-blue">highlight-current-blue</p>
		</section>
	</section>

	<section>
		<h2>Spectacular image!</h2>
		<a class="image" href="http://lab.hakim.se/meny/" target="_blank">
			<img width="320" height="299" src="http://s3.amazonaws.com/hakim-static/portfolio/images/meny.png" alt="Meny">
		</a>
	</section>

	<section>
		<h2>Export to PDF</h2>
		<p>Presentations can be <a href="https://github.com/hakimel/reveal.js#pdf-export">exported to PDF</a>, below is an example that's been uploaded to SlideShare.</p>
		<iframe id="slideshare" src="http://www.slideshare.net/slideshow/embed_code/13872948" width="455" height="356" style="margin:0;overflow:hidden;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>
		<script>
			document.getElementById('slideshare').attributeName = 'allowfullscreen';
		</script>
	</section>

	<section>
		<h2>Take a Moment</h2>
		<p>
			Press b or period on your keyboard to enter the 'paused' mode. This mode is helpful when you want to take distracting slides off the screen
			during a presentation.
		</p>
	</section>

	<section>
		<h2>Stellar Links</h2>
		<ul>
			<li><a href="http://slid.es">Try the online editor</a></li>
			<li><a href="https://github.com/hakimel/reveal.js">Source code on GitHub</a></li>
			<li><a href="http://twitter.com/hakimel">Follow me on Twitter</a></li>
		</ul>
	</section>

	<section>
		<h1>THE END</h1>
		<h3>BY Hakim El Hattab / hakim.se</h3>
	</section>

</div>
-->